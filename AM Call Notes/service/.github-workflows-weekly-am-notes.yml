name: Weekly AM Notes Collection

on:
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC
  workflow_dispatch:     # Allow manual trigger
    inputs:
      date_override:
        description: 'Override date range (YYYY-MM-DD to YYYY-MM-DD)'
        required: false
        type: string
      dry_run:
        description: 'Dry run mode (no file changes)'
        required: false
        default: false
        type: boolean

jobs:
  collect-notes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests python-dateutil
    
    - name: Create logs directory
      run: |
        mkdir -p "AM Call Notes/service/logs"
    
    - name: Run AM Notes Collection
      env:
        CONFLUENCE_TOKEN: ${{ secrets.CONFLUENCE_TOKEN }}
        CONFLUENCE_EMAIL: ${{ secrets.CONFLUENCE_EMAIL }}
        CONFLUENCE_BASE_URL: "https://edocgroup.atlassian.net"
        DRY_RUN: ${{ github.event.inputs.dry_run }}
        DATE_OVERRIDE: ${{ github.event.inputs.date_override }}
      run: |
        cd "AM Call Notes"
        python service/am_collection_script.py
    
    - name: Check for changes
      id: git-changes
      run: |
        git add "AM Call Notes/"
        if git diff --staged --quiet; then
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes to commit"
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected"
        fi
    
    - name: Commit and push changes
      if: steps.git-changes.outputs.changes == 'true' && github.event.inputs.dry_run != 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Weekly AM Notes Collection"
        
        # Get the date range for commit message
        WEEK_START=$(date -d "last monday" +%Y-%m-%d)
        WEEK_END=$(date -d "last sunday" +%Y-%m-%d)
        
        git commit -m "Weekly AM notes collection: $WEEK_START to $WEEK_END" \
                   -m "Automated collection of Account Manager call notes and daily digests" \
                   -m "Generated by: Weekly AM Notes Collection workflow"
        
        git push
    
    - name: Create summary issue (on failure)
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const title = 'Weekly AM Notes Collection Failed';
          const body = `
          ## Collection Failure Report
          
          **Date:** ${new Date().toISOString().split('T')[0]}
          **Workflow:** ${context.workflow}
          **Run:** ${context.runNumber}
          
          ### Details
          The weekly AM notes collection workflow failed. Please check the logs and take appropriate action.
          
          ### Actions Needed
          - [ ] Review workflow logs
          - [ ] Check Confluence API credentials
          - [ ] Verify AM mapping configuration
          - [ ] Re-run collection manually if needed
          
          ### Links
          - [Failed Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
          - [Configuration File](${context.payload.repository.html_url}/blob/main/AM%20Call%20Notes/service/weekly_collection_config.yaml)
          
          **Auto-generated by Weekly AM Notes Collection workflow**
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['automation', 'am-notes', 'bug']
          });
    
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: collection-logs
        path: "AM Call Notes/service/logs/"
        retention-days: 30
    
    - name: Generate summary
      if: steps.git-changes.outputs.changes == 'true'
      run: |
        echo "## Weekly AM Notes Collection Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Collection Period:** $(date -d 'last monday' +%Y-%m-%d) to $(date -d 'last sunday' +%Y-%m-%d)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count generated files
        AM_FILES=$(find "AM Call Notes" -name "Call_Notes_*_to_*.md" -newer "AM Call Notes/service/weekly_collection_config.yaml" | wc -l)
        SUMMARY_FILES=$(find "AM Call Notes" -name "AM_Notes_Summary_*_to_*.md" -newer "AM Call Notes/service/weekly_collection_config.yaml" | wc -l)
        
        echo "**Files Generated:**" >> $GITHUB_STEP_SUMMARY
        echo "- AM Call Note Files: $AM_FILES" >> $GITHUB_STEP_SUMMARY
        echo "- Summary Files: $SUMMARY_FILES" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** âœ… Collection completed successfully" >> $GITHUB_STEP_SUMMARY